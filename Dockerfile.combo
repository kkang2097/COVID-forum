# Build step #1: build the React front end
FROM node:16-alpine as build-step
WORKDIR /app
ENV PATH /app/node_modules/.bin:$PATH
COPY package.json yarn.lock ./
COPY ./src ./src
COPY ./public ./public
RUN yarn install
RUN yarn build

# Build step #2: build the API with the client as static files
FROM python:3.8-alpine
WORKDIR /app
COPY --from=build-step /app/build ./build

RUN mkdir ./api
COPY api/requirements.txt api/api.py api/.flaskenv ./api
RUN pip install -r ./api/requirements.txt
ENV FLASK_ENV production

#or "EXPOSE $PORT"
EXPOSE 3000
WORKDIR /app/api

#or CMD ["gunicorn","--timeout", "1000", "--workers=1", "-b", ":3000", "api:app"]
CMD gunicorn --timeout 1000 --workers=1 -b :3000 api:app

#To push onto Google Container Repository

#Command: docker tag [SOURCE_IMAGE] gcr.io/[PROJECT_ID]/[IMAGE_NAME]
#Add tag: docker tag react-flask-app gcr.io/termproj-333004/react-flask-app

#Command: docker push [SOURCE_IMAGE] gcr.io/[PROJECT_ID]/[IMAGE_NAME]
#Push: docker push gcr.io/termproj-333004/react-flask-app

#
#In GCP Cloud Run, set port to 3000 (or any that works haha)
#


#To push onto Docker Hub
#Command: docker push [repository]:[tag]
#Example: docker push kkang2097/test-repo:fullapp





#docker build -f Dockerfile.combo -t react-flask-app .
#docker run --rm -p 3000:3000 react-flask-app
#Combined: docker build -f Dockerfile.combo -t react-flask-app . && docker run --rm -p 3000:3000 react-flask-app

#Command: docker tag [SOURCE_IMAGE] gcr.io/[PROJECT_ID]/[IMAGE_NAME]
#Add tag: docker tag react-flask-app gcr.io/termproj-333004/react-flask-app

#Command: docker push [SOURCE_IMAGE] gcr.io/[PROJECT_ID]/[IMAGE_NAME]
#Push: docker push gcr.io/termproj-333004/react-flask-app

#To push onto Docker Hub
#Command: docker push [repository]:[tag]
#Example: docker push kkang2097/test-repo:hello
